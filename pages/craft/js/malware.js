document.addEventListener("DOMContentLoaded", () => {
    const container = document.getElementById("malware-container");

    // Fetch the malware.json file (Make sure the correct file path is used)
    fetch("/pages/json/malware.json")  // Ensure you are referencing the .json file here
      .then((response) => response.json())
      .then((data) => {
        const malwareList = data.malware;

        malwareList.forEach((malware) => {
          // Create an element for each malware
          const malwareElement = document.createElement("div");
          malwareElement.className = "malware-item";
          
          // Create the anchor element and link it to the GitHub repository
          const malwareLink = document.createElement("a");
          malwareLink.href = malware.github_link || "#";  // Use the GitHub link or fallback to # if not provided
          malwareLink.target = "_blank";  // Open the link in a new tab

          // Set the text of the link to the malware name
          malwareLink.innerText = malware.name;

          // Apply random styles
          const randomRotation = Math.random() < 0.5 ? -10 : 10;
          const randomUpsideDown = Math.random() < 0.3; // 30% chance for upside down
          const isGreyedOut = Math.random() < 0.4; // 40% chance for greyed out
          const randomSize = Math.floor(Math.random() * (35 - 14 + 1)) + 14; // Random size between 14px and 35px

          // Apply random size
          malwareLink.style.fontSize = `${randomSize}px`;

          // Apply rotation and upside-down effect
          if (randomUpsideDown) {
            malwareLink.style.transform = "rotate(180deg)";
          } else {
            malwareLink.style.transform = `rotate(${randomRotation}deg)`;
          }

          // Apply greyed-out color if needed
          if (isGreyedOut) {
            malwareLink.style.color = "grey";
          } else {
            malwareLink.style.color = "black";
          }

          // Hover effects
          malwareLink.addEventListener("mouseover", () => {
            malwareLink.style.transform = "rotate(0deg)";
            malwareLink.style.color = "black";
          });

          malwareLink.addEventListener("mouseout", () => {
            // Reset styles on mouseout
            if (randomUpsideDown) {
              malwareLink.style.transform = "rotate(180deg)";
            } else {
              malwareLink.style.transform = `rotate(${randomRotation}deg)`;
            }

            malwareLink.style.color = isGreyedOut ? "grey" : "black";
          });

          // Append the link to the malware item container
          malwareElement.appendChild(malwareLink);

          // Append the element to the main container
          container.appendChild(malwareElement);
        });
      })
      .catch((error) => console.error("Error loading malware.json:", error));
});

